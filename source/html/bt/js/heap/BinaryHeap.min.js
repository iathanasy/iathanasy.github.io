Ext.define("MJ.BinaryHeap",{extend:"MJ.Heap",config:{elements:[]},constructor:function(a){this.initConfig(a);this.callParent(arguments)},heapify:function(){var b=this.elements;this.clear();for(var a in b){this.add(b[a])}},clear:function(){this.callParent(arguments);this.elements=[]},get:function(){return this.elements[0]},add:function(a){this.elements.push(a);if(this.elements.length>1){this._siftUp(this.elements.length-1)}},remove:function(){if(this.elements.length===0){return}var a=this.elements[0];this.elements[0]=this.elements[this.elements.length-1];this.elements.pop();if(this.elements.length>1){this._siftDown(0)}return a},_siftUp:function(b){var c=this.elements[b];while(b>0){var a=(b-1)>>1;var d=this.elements[a];if(this._compare(d,c)>=0){break}this.elements[b]=d;b=a}this.elements[b]=c},_siftDown:function(a){var b=this.elements[a];var d=this.elements.length>>1;while(a<d){var f=(a<<1)+1;var e=this.elements[f];var c=f+1;if(c<this.elements.length&&this._compare(this.elements[c],e)>0){e=this.elements[f=c]}if(this._compare(b,e)>=0){break}this.elements[a]=e;a=f}this.elements[a]=b},getRoot:function(){return this.elements.length===0?null:"0"},getLeft:function(b){var a=(b<<1)+1;if(a>=this.elements.length){return null}return a},getRight:function(a){var b=(a<<1)+2;if(b>=this.elements.length){return null}return b},getString:function(a){return this.elements[a]}});