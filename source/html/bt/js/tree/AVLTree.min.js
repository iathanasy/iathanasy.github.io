Ext.define("MJ.AVLTree",{extend:"MJ.BBST",constructor:function(a){this.initConfig(a);this.callParent(arguments)},createNode:function(a,b){return new MJ.AVLTree.Node({element:a,parent:b})},afterAdd_:function(a){while(a=a.parent){if(a.isBalanced()){a.updateHeight()}else{this._rebalance(a);break}}},afterRemove_:function(a){while(a=a.parent){if(a.isBalanced()){a.updateHeight()}else{this._rebalance(a)}}},afterRotate_:function(a,b,d){this.callParent(arguments);a.updateHeight();b.updateHeight()},_rebalance:function(a){p=a.tallerChild();n=p.tallerChild();if(p.isLeftChild()){if(n.isLeftChild()){this.rotateRight_(a)}else{this.rotateLeft_(p);this.rotateRight_(a)}}else{if(n.isLeftChild()){this.rotateRight_(p);this.rotateLeft_(a)}else{this.rotateLeft_(a)}}}});Ext.define("MJ.AVLTree.Node",{extend:"MJ.BinaryTree.Node",constructor:function(a){this.callParent(arguments);this.initConfig(a)},isBalanced:function(){return Math.abs(this.balanceFactor())<=1},balanceFactor:function(){var a=this.left?this.left.height:0;var b=this.right?this.right.height:0;return a-b},updateHeight:function(){var a=this.left?this.left.height:0;var b=this.right?this.right.height:0;this.height=1+Math.max(a,b)}});