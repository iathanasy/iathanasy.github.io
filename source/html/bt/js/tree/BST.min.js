Ext.define("MJ.BST",{extend:"MJ.BinaryTree",config:{comparator:null},constructor:function(a){this.callParent(arguments);this.initConfig(a)},setElements:function(b){if(!Ext.isArray(b)){return}for(var a in b){this.add(b[a])}this.elements=b},_compare:function(b,a){if(this.comparator){return this.comparator.compare(b,a)}return MJ.Comparator.compare(b,a)},add:function(b){if(!b){return}if(!this.root){this.root=this.createNode(b);this.size++;this.afterAdd_(this.root);return}var c=this.root;var e=this.root;var d=0;while(e!==null){d=this._compare(b,e.element);c=e;if(d>0){e=e.right}else{if(d<0){e=e.left}else{e.element=b;return}}}var a=this.createNode(b,c);if(d>0){c.right=a}else{c.left=a}this.size++;this.afterAdd_(a)},afterAdd_:function(a){},_node:function(a){if(!a){return null}var c=this.root;while(c){var b=this._compare(a,c.element);if(b===0){return c}if(b>0){c=c.right}else{c=c.left}}return c}});